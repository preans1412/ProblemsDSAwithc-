class Solution {
public:
     int smile(int n)
       {
          int  ans=0;
           while(n>0)
           {
               ans+=(n%10)*(n%10);
               n/=10;
           }
           return ans;
       }

       
    bool isHappy(int num)
     {
       int slow=num;
       int fast=num;
       do{
           slow=smile(slow);
           fast=smile(smile(fast));
       } 
       while(slow!=fast);
       return slow==1;
       
    }
};



We can solve this question using Multiple Approaches. (Here I have explained all the possible solutions of this problem).

Solved using Math + Hash Table..
Solved using Floyd's Cycle-Finding Algorithm.






/*

    Time Complexity : O(logN) where N is the number.

    Space Complexity : O(logN), Hash Table(unordered_set(set)) space.

    Solved using Math + Hash Table.

*/


/***************************************** Approach 1 *****************************************/

class Solution {
private:
    int nextNumber(int n){
        int newNumber = 0;
        while(n!=0){
            int num = n%10;
            newNumber += num*num;
            n = n/10;
        }
        return newNumber;
    }
public:
    bool isHappy(int n) {
        unordered_set<int> set;
        while(n!=1 && !set.count(n)){
            set.insert(n);
            n = nextNumber(n);
        }
        return n==1;
    }
};




/*

    Time Complexity : O(logN) where N is the number.

    Space Complexity : O(1), Constant space.

    Solved using Floyd's Cycle-Finding Algorithm.

*/


/***************************************** Approach 2 *****************************************/

class Solution {
private:
    int nextNumber(int n){
        int newNumber = 0;
        while(n!=0){
            int num = n%10;
            newNumber += num*num;
            n = n/10;
        }
        return newNumber;
    }
public:
    bool isHappy(int n) {
        int slowPointer = n;
        int fastPointer = nextNumber(n);
        while(fastPointer != 1 && fastPointer != slowPointer){
            slowPointer = nextNumber(slowPointer);
            fastPointer = nextNumber(nextNumber(fastPointer));
        }
        return fastPointer==1;
    }
};
