

1ST METHOD:

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs)
    {
        string ans;
        for(int i=0;i<strs[0].size();i++)
        {
            for(int j=1;j<strs.size();j++)
            {
                if(strs[0][i] != strs[j][i])
                {
                    return ans;
                }
            }
            ans += strs[0][i];
        }
        return ans;
    }
};

PROBLEMS 
what if size of string j is smaller than size of string i, in that case, we will have undefined behavior if i >= str[j].size() if the string is not constant.




2ND METHOD:
The code below is very much self explanatory.

We first sort the array of strings.
Then, we choose the first and last string in the array. [They are supposed to be the most different among all the pairs of strings in the sorted array]
We just compare how many common characters match from index i = 0 of these two strings


class Solution {
public:
    string longestCommonPrefix(vector<string>& str) {
        int n = str.size();
        if(n==0) return "";
        
        string ans  = "";
        sort(begin(str), end(str));
        string a = str[0];
        string b = str[n-1];
        
        for(int i=0; i<a.size(); i++){
            if(a[i]==b[i]){
                ans = ans + a[i];
            }
            else{
                break;
            }
        }
        
        return ans;
        
    }
};



for sorting, you will be doing O(nlog(n))m.
Here, n log(n) is basic sorting logic, while considering m is general size of each individual string.
Better logic will be start with string 1 as the solution, compare it with other string, keep on decreasing your answer length till 0.
That way it will only take O(mn).




3RD METHOD:

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs){
        int n =strs.size();
        string ans; 
        sort(strs.begin(), strs.end());
        string a = strs[0];
        string b = strs[n-1];
        for(int i =0; i< a.size(); i++){
            if(a[i] == b[i]){
                ans += a[i];
            }else break;
        }
        return ans;
    }
};


Wouldn't the time complexity be O((n*logn)*m) as sorting in string will take total (nlogn) time and the length of whole vector is 'm'.

For those who didn't understand: We need to find the longest string common to all elements of the array of strings.
So, the shortest string can be the only longest common string common to all the elements Read that again!
